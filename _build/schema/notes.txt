Ссылка на документацию --- https://docs.modx.com/revolution/2.x/case-studies-and-tutorials/using-custom-database-tables-in-your-3rd-party-components

Сначала мы скажем браузеру и парсеру, что это XML-код со стандартным XML-заголовком.
Затем мы создадим тег «model» и поместим в него некоторые атрибуты.

    Package - имя пакета xPDO.
    BaseClass - базовый класс, из которого будут расширяться все определения классов.
                Если вы не планируете создавать собственное расширение xPDOObject, лучше оставить его по умолчанию.
    Platform - используемая платформа базы данных.
                В настоящее время xPDO поддерживает только mysql.
    DefaultEngine - механизм по умолчанию для таблиц базы данных, обычно MyISAM или InnoDB.
                MODX рекомендует использовать MyISAM.
    Phpdoc-package & phpdoc-subpackage - это настраиваемые атрибуты,
                которые мы будем использовать в файлах карт и классов.
                Они не являются стандартными атрибутами xPDO, но показывают, что вы можете поместить все, что хотите, в качестве атрибутов.

«Объект» - это наше представление таблицы, которая будет генерировать в класс xPDOObject, когда мы закончим.

     Class - это имя класса, который мы хотим сгенерировать из таблицы.
            Здесь мы будем использовать «sfStore».
            Обратите внимание: вместо «Store» мы добавили префикс «sf», чтобы предотвратить конфликты с другими пакетами,
            которые мы могли бы установить, и которые могли бы также содержать таблицы Store.
     Table - Это должно указывать на фактическое имя таблицы базы данных, минус префикс.
     Extends - это класс, который он расширяет.
            Обратите внимание, что вы можете сделать подклассы и расширенные классы прямо из XML.
            Расширенные классы наследуют поля своего родительского класса.

Вы увидите, что эта таблица расширяет «xPDOSimpleObject», а не xPDOObject.
Это означает, что в таблице уже есть поле «id», то есть первичный ключ с автоинкрементом.
